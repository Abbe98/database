#Application Configuration
NAME=blazegraph-ha
BLZG_HOME=/usr/local/${NAME}
BLZG_CONF=$BLZG_HOME/conf
BLZG_LOG=/var/log/${NAME}
# Run Blazegraph as this user ID and group ID
BLZG_USER=blzg
BLZG_GROUP=blzg

#Blazegraph High Availability Configuration
# Name of the federation of services (controls the Apache River GROUPS).
FEDNAME=blazegraph-ha-1

# Path for local storage for this federation of services.
FED_DIR="${BLZG_HOME}"/data

# Name of the replication cluster to which this HAJournalServer will belong.
LOGICAL_SERVICE_ID=HA-Replication-Cluster-1

# Where to find the Apache River service registrars (can also use multicast).
#Use for a HA1+ configuration
LOCATORS="jini://localhost/"
#HA3 example
#export LOCATORS="jini://bigdata15/,jini://bigdata16/,jini://bigdata17/"

# Where to find the Apache Zookeeper ensemble.
#Use for single node configuration
ZK_SERVERS="localhost:2181"
#Use for a multiple ZK configuration
#ZK_SERVERS="bigdata15:2081,bigdata16:2081,bigdata17:2081"

#Replication Factor (set to one for HA1) configuration
#Use for a HA1 configuration
REPLICATION_FACTOR=1
#Use for a HA1+ configuration
#export REPLICATION_FACTOR=3

LIB_DIR="${BLZG_HOME}"/lib
CONFIG_DIR="${BLZG_CONF}"
JINI_CLASS_SERVER_PORT=8081
JINI_CONFIG="${CONFIG_DIR}"/startHAServices.config
POLICY_FILE=${CONFIG_DIR}/policy.all
LOGGING_CONFIG=${CONFIG_DIR}/logging.properties
LOG4J_CONFIG=${CONFIG_DIR}/log4jHA.properties

#NanoSparqlServerConfiguration
GROUP_COMMIT=false
JETTY_XML="${BLZG_CONF}"/jetty.xml
JETTY_RESOURCE_BASE="${BLZG_HOME}"/war/
JETTY_OPTS="-Djetty.resourceBase=$JETTY_RESOURCE_BASE -DjettyXml=$JETTY_XML"
BLZG_NSS=com.bigdata.rdf.sail.webapp.NanoSparqlServer
PORT=9999
LOGGING_CONFIG="${BLZG_CONF}"/logging.properties
LOG4J_CONFIG="${BLZG_CONF}"/log4j.properties
NSS="com.bigdata.rdf.sail.webapp.NanoSparqlServer"
NSS_NAMESPACE="kb"
NSS_PROPERTIES="${BLZG_CONF}"/RWStore.properties
NSS="com.bigdata.rdf.sail.webapp.NanoSparqlServer"
NSS_NAMESPACE="kb"
NSS_PROPERTIES="${BLZG_CONF}"/RWStore.properties
JVM_OPTS="-Djava.awt.headless=true -server -Xmx4g -XX:MaxDirectMemorySize=3000m -XX:+UseG1GC"
#Used for testing on EC2 micro instances
#JVM_OPTS="-Djava.awt.headless=true -server -Xmx256m -XX:MaxDirectMemorySize=256m -XX:+UseG1GC"

